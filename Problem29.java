import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;

/* ~ ~ ~ QUESTION PROMPT ~ ~ ~ 
 * 
 * Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:
 * 
 * 	2^2=4, 2^3=8, 2^4=16, 2^5=32,
 * 	3^2=9, 3^3=27, 3^4=81, 3^5=243,
 * 	4^2=16, 4^3=64, 4^4=256, 4^5=1024,
 * 	5^2=25, 5^3=125, 5^4=625, 5^5=3125
 * 
 * If they are then placed in numerical order, with any repeats removed, we get
 * the following sequence of 15 distinct terms:
 * 
 * 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
 * 
 * How many distinct terms are in the sequence generated by a^b for 2<= a <= 100
 * and 2 <= b <= 100?
 */

public class Problem29 {

	private static long startTime = System.nanoTime();
	private static final int min_limit = 2;
	private static final int max_limit = 100;
	private static ArrayList<BigInteger> nums;
	
	private static void findAllCombinations(int min, int max) {
		nums = new ArrayList<BigInteger>();
		BigInteger temp;
		
		for(int a=min; a<=max; a++) {
			for(int b=min; b<=max; b++) {
				
				temp = BigInteger.valueOf(a).pow(b);
				
				if(!nums.contains(temp))
					nums.add(temp);
			}
		}
		Collections.sort(nums);
	}
	
	public static void main(String[] args) {
		
		findAllCombinations(min_limit, max_limit);
		
		System.out.println(nums + "\nSize: " + nums.size());
		long endTime = System.nanoTime();
		System.out.println("\nTook "+ ((endTime - startTime) / 1000000000.0) + " seconds");
	}

}
